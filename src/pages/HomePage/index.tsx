/* eslint-disable no-alert */

/* eslint-disable react/no-array-index-key */
import React from 'react'
import { MoonLoader } from 'react-spinners'

import {
	Button,
	FormControl,
	InputLabel,
	MenuItem,
	Select,
	SelectChangeEvent,
	Table,
	TableBody,
	TableCell,
	TableContainer,
	TableHead,
	TableRow,
	TextField,
	ToggleButton,
	ToggleButtonGroup,
} from '@mui/material'
import { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment/AdapterMoment'
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider/LocalizationProvider'
import { TimePicker } from '@mui/x-date-pickers/TimePicker/TimePicker'

import { AxiosError } from 'axios'
import moment from 'moment'

import Colors from '../../shared/colors'

import Header from '../../components/Header'

import AppleBoomEmoji from '../../assets/images/apple-boom.png'
import AppleLikeEmoji from '../../assets/images/apple-like.png'
import createForecast, { ForecastBody, ForecastError, ForecastResponse } from '../../services/createForecast'
import getModels, { Model } from '../../services/getModels'

import Piechart from './Piechart'
import StyledHomePage, { StyledCell, StyledIcon } from './styles'

const seasons = ['–ó–∏–º–∞', '–í–µ—Å–Ω–∞', '–õ–µ—Ç–æ', '–û—Å–µ–Ω—å']

const forecastAccidentResult: { [key: number]: React.ReactNode } = {
	0: (
		<span className="forecast__result--text">
			<StyledIcon size="20px" src={AppleLikeEmoji} alt="üëç" /> –î–¢–ü –Ω–µ –±—É–¥–µ—Ç
		</span>
	),
	1: (
		<span className="forecast__result--text">
			<StyledIcon size="20px" src={AppleBoomEmoji} alt="üí•" /> –î–¢–ü –±—É–¥–µ—Ç
		</span>
	),
}

const HomePage: React.FC = () => {
	const isMounted = React.useRef(false)

	const [models, setModels] = React.useState<Model[]>([])
	const [currentModelId, setCurrentModelId] = React.useState<number>(0)

	const [temperature, setTemperature] = React.useState(1.9)
	const [atmosphericPressure, setAtmosphericPressure] = React.useState(752.4)
	const [humidity, setHumidity] = React.useState(96)
	const [windSpeed, setWindSpeed] = React.useState(2)
	const [cloudiness, setCloudiness] = React.useState(1.0)

	const [season, setSeason] = React.useState(seasons[0]!)
	const [time, setTime] = React.useState(moment())

	const [data, setData] = React.useState<ForecastResponse[]>([]) // –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
	const [isLoading, setIsLoading] = React.useState(true) // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

	const lastForecast = data[data.length - 1]

	// –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫–µ—à–∞ (localStorage). –ù—É–∂–µ–Ω, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —è—á–µ–π–∫–∏, –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–µ—à–∞
	const [isLoadedFromCache, setIsLoadedFromCache] = React.useState(true)

	const handleChangeSeason = (_: React.MouseEvent<HTMLElement>, newSeason: string) => {
		newSeason && setSeason(newSeason)
	}

	const handleGetModels = async () => {
		try {
			const fetchedModels = await getModels()

			setModels(fetchedModels)
		} catch (err) {
			alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!')
		}
	}

	const handleSelectModel = (event: SelectChangeEvent) => {
		setCurrentModelId(Number(event.target.value))
	}

	const handleCreateForecast = async () => {
		const params: ForecastBody = {
			model_id: currentModelId,
			options: [
				{
					temperature,
					atmospheric_pressure: atmosphericPressure,
					humidity,
					wind_speed: windSpeed,
					cloudiness,
					hour: time.hour(),
					season_autumn: Number(season === '–û—Å–µ–Ω—å'),
					season_spring: Number(season === '–í–µ—Å–Ω–∞'),
					season_summer: Number(season === '–õ–µ—Ç–æ'),
					season_winter: Number(season === '–ó–∏–º–∞'),
				},
			],
		}

		setIsLoading(true)

		try {
			const newData = await createForecast(params)
			setData((p) => [...p, newData])
		} catch (error) {
			const errorMessage = (error as unknown as AxiosError<ForecastError>)?.response?.data.message!
			alert(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: ${errorMessage}`)
		}

		setIsLoadedFromCache(false)
		setIsLoading(false)
	}

	const handleClearForecastsHistory = () => {
		setData([])
	}

	// –í—ã–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏–∑ localStorage
	React.useEffect(() => {
		isMounted.current = true

		try {
			const forecastsHistory = JSON.parse(
				window.localStorage.getItem('forecasts') || '',
			) as unknown as ForecastResponse[]

			setData(forecastsHistory)
		} catch {
			setData([])
		}

		handleGetModels()
	}, [])

	// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ localStorage
	React.useEffect(() => {
		isMounted.current && window.localStorage.setItem('forecasts', JSON.stringify(data))
	}, [data])

	return (
		<StyledHomePage $isAccident={data.length > 0 ? lastForecast?.predicted_class! : -1}>
			<Header />
			<main>
				<div className="cage">
					<div className="cage__row">
						<StyledCell className="cell--time_parameters" width="330px">
							<h2> –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ </h2>
							<ToggleButtonGroup
								color="primary"
								value={season}
								exclusive
								onChange={handleChangeSeason}
								sx={{
									display: 'flex',
									justifyContent: 'center',
									width: '270px',
									margin: '0 auto',
								}}
							>
								{seasons.map((seasonItem) => (
									<ToggleButton key={seasonItem} value={seasonItem}>
										{seasonItem}
									</ToggleButton>
								))}
							</ToggleButtonGroup>
							<LocalizationProvider adapterLocale="ru" dateAdapter={AdapterMoment}>
								<TimePicker
									sx={{
										width: '275px',
										margin: '15px auto',
									}}
									views={['hours']}
									label={
										<>
											–í—Ä–µ–º—è (<code>—á–∞—Å</code>)
										</>
									}
									value={time}
									ampm={false}
									onChange={(v) => v && setTime(v)}
								/>
							</LocalizationProvider>
						</StyledCell>
						<StyledCell className="cell--place">
							<ul>
								<li>
									<b> –ì–æ—Ä–æ–¥: </b>
									–ú–æ—Å–∫–≤–∞
								</li>
								<li>
									<b> –†–µ–≥–∏–æ–Ω: </b>
									–°–µ–≤–µ—Ä
								</li>
							</ul>
						</StyledCell>
						<StyledCell className="cell--create_forecast" width="290px">
							<FormControl
								sx={{
									width: '250px',
									marginTop: '10px',
								}}
							>
								<InputLabel id="model-select-small-label">–ú–æ–¥–µ–ª—å</InputLabel>
								<Select
									labelId="model-select-small-label"
									id="model-select-small"
									value={String(currentModelId)}
									label="–ú–æ–¥–µ–ª—å"
									onChange={handleSelectModel}
								>
									{models.length === 0 && (
										<MenuItem value={0} disabled>
											–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–∏ÃÜ
										</MenuItem>
									)}
									{models.map((model) => (
										<MenuItem key={model.id} value={model.id}>
											{model.ru_name}
										</MenuItem>
									))}
								</Select>
							</FormControl>
							<Button
								variant="outlined"
								color="success"
								onClick={handleCreateForecast}
								sx={{
									width: '250px',
									marginTop: '10px',
								}}
							>
								–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
							</Button>
							<Button
								sx={{
									width: '250px',
									marginTop: '10px',
								}}
								variant="outlined"
								color="error"
								onClick={handleClearForecastsHistory}
								disabled={data.length === 0}
							>
								–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
							</Button>
						</StyledCell>
						{data.length > 0 && !isLoadedFromCache && (
							<StyledCell className="cell--forecast__result" width="330px" isLoading={isLoading}>
								{isLoading ? (
									<MoonLoader
										color={Colors.BLUE}
										speedMultiplier={0.9}
										size={100}
										cssOverride={{
											marginTop: '30px',
										}}
									/>
								) : (
									<>
										<h2> –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ </h2>
										<span className="forecast_result">{forecastAccidentResult[lastForecast!.predicted_class]}</span>
										<span className="forecast_probabilities">
											<code>
												{(lastForecast!.predicted_probabilities[lastForecast!.predicted_class]! * 100).toFixed(3)}%
											</code>
										</span>
									</>
								)}
							</StyledCell>
						)}
					</div>
					<div className="cage__row">
						<StyledCell className="cell--forecast_parameters" width="330px" height="450px">
							<h2> –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≥–æ–¥—ã </h2>
							<TextField
								sx={{
									width: '80%',
									marginBlock: '8px',
								}}
								label={
									<>
										–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (<code>¬∞C</code>)
									</>
								}
								type="number"
								value={temperature}
								onChange={({ target }) => setTemperature(Number(target.value))}
							/>
							<TextField
								sx={{
									width: '80%',
									marginBlock: '8px',
								}}
								label={
									<>
										–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (<code>–º–º —Ä—Ç.—Å—Ç.</code>)
									</>
								}
								type="number"
								value={atmosphericPressure}
								onChange={({ target }) => setAtmosphericPressure(Number(target.value))}
							/>
							<TextField
								sx={{
									width: '80%',
									marginBlock: '8px',
								}}
								label={
									<>
										–í–ª–∞–∂–Ω–æ—Å—Ç—å (<code>%</code>)
									</>
								}
								type="number"
								value={humidity}
								onChange={({ target }) => setHumidity(Number(target.value))}
							/>
							<TextField
								sx={{
									width: '80%',
									marginBlock: '8px',
								}}
								label={
									<>
										–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (<code>–º/—Å</code>)
									</>
								}
								type="number"
								value={windSpeed}
								onChange={({ target }) => setWindSpeed(Number(target.value))}
							/>
							<TextField
								sx={{
									width: '80%',
									marginBlock: '8px',
								}}
								label={
									<>
										–û–±–ª–∞—á–Ω–æ—Å—Ç—å (<code>–æ–∫—Ç–∞–Ω</code>)
									</>
								}
								type="number"
								value={cloudiness}
								onChange={({ target }) => setCloudiness(Number(target.value))}
							/>
						</StyledCell>
						{data.length > 0 && (
							<StyledCell className="cell--forecast__history" width="330px" height="450px">
								<h2>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤</h2>
								<TableContainer>
									<Table>
										<TableHead sx={{ userSelect: 'none' }}>
											<TableRow>
												<TableCell> –ù–æ–º–µ—Ä –ø—Ä–æ–≥–Ω–æ–∑–∞ </TableCell>
												<TableCell> –†–µ–∑—É–ª—å—Ç–∞—Ç </TableCell>
											</TableRow>
										</TableHead>
										<TableBody>
											{data.map((forecastResult, index) => (
												<TableRow key={index} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>
													<TableCell sx={{ userSelect: 'none' }} component="th" scope="row">
														{index + 1}
													</TableCell>
													<TableCell component="th" scope="row">
														{forecastAccidentResult[forecastResult.predicted_class]}
													</TableCell>
												</TableRow>
											))}
										</TableBody>
									</Table>
								</TableContainer>
							</StyledCell>
						)}
						{data.length > 0 && !isLoadedFromCache && (
							<StyledCell className="cell--probabilities" width="330px" height="450px" isLoading={isLoading}>
								<h2> –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å–ª—É—á–∞—è</h2>
								<Piechart probabilities={lastForecast?.predicted_probabilities!} />
							</StyledCell>
						)}
					</div>
				</div>
			</main>
		</StyledHomePage>
	)
}

export default HomePage
